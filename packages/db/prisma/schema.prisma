generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Book {
  id        Int      @id @default(autoincrement())
  hebrew    String?
  name      String  @unique
  books     Chapter[]
}

model Chapter {
  id         Int      @id @default(autoincrement())
  bookId   Int
  book     Book @relation(fields: [bookId], references: [id])
  name     String  @unique
  hebrew   String?
  portions Portion[]
}

model Portion {
  id         Int      @id @default(autoincrement())
  chapterId  Int
  chapter    Chapter @relation(fields: [chapterId], references: [id])
  name       String
  hebrew     String?
  readings   Reading[]
}

model Reading {
  id          Int      @id @default(autoincrement())
  week        Int
  readerId    String
  // reader      User     @relation(fields: [readerId], references: [id])
  portionId   Int
  portion     Portion  @relation(fields: [portionId], references: [id])
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model User {
  id            String   @id @default(cuid())
  name          String?
  email         String  @unique
  emailVerified DateTime @default(now())
  image         String?
  accounts      Account[]
  sessions      Session[]
  // readings      Reading[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@id([identifier, token])
}
